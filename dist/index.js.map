{"version":3,"sources":["/src/utils.ts"],"sourcesContent":["import * as core from '@actions/core';\r\nimport { exec } from '@actions/exec';\r\nimport * as glob from '@actions/glob';\r\nimport fs from 'fs';\r\n\r\n/**\r\n * 克隆仓库\r\n */\r\nexport const cloneRepo = async (): Promise<void> => {\r\n  core.startGroup('clone repo');\r\n  try {\r\n    // todo: 传入分支\r\n    // todo: 传入仓库地址\r\n    // todo: 传入工作目录\r\n    // todo: 传入 options 参数\r\n    const exitcode = await exec(\r\n      'git',\r\n      ['clone', '--depth=1', '--single-branch', '--branch', 'develop', 'https://github.com/Tencent/tdesign-starter-cli', 'tdesign-starter-cli'],\r\n    );\r\n\r\n    if (exitcode !== 0) {\r\n      core.setFailed('clone repo failed');\r\n    }\r\n    core.info(`clone repo success`);\r\n    process.chdir('./tdesign-starter-cli');\r\n  } catch (error) {\r\n    if (error instanceof Error) core.setFailed(error.message)\r\n  }\r\n  core.endGroup();\r\n};\r\n\r\n/**\r\n * 安装pnpm\r\n */\r\nexport const pnpmInstall = async (): Promise<void> => {\r\n  core.startGroup('install pnpm');\r\n  try {\r\n    const exitcode = await exec('npm install pnpm -g');\r\n\r\n    if (exitcode !== 0) {\r\n      core.setFailed('pnpm install failed');\r\n    }\r\n    core.info(`install pnpm success`);\r\n  } catch (error) {\r\n    if (error instanceof Error) core.setFailed(error.message)\r\n  }\r\n  core.endGroup();\r\n};\r\n\r\n/**\r\n * 构建项目\r\n */\r\nexport const buildProducts = async (): Promise<void> => {\r\n  core.startGroup('build dist');\r\n  try {\r\n    const pnpmInstallExitcode = await exec('pnpm install');\r\n    const exitcode = await exec('pnpm run build');\r\n\r\n    if (exitcode !== 0 || pnpmInstallExitcode !== 0) {\r\n      core.setFailed('build failed');\r\n    }\r\n    core.info(`build success`);\r\n  } catch (error) {\r\n    if (error instanceof Error) core.setFailed(error.message)\r\n  }\r\n  core.endGroup();\r\n};\r\n\r\n/**\r\n * 生成vite模版\r\n */\r\nexport const generateViteTemplate = async ({ rootDir }: { rootDir: string }): Promise<void> => {\r\n  //todo 兼容vite farm webpack\r\n  // todo 传入`${process.cwd()}/dist/${templateName[0]}`参数\r\n  core.startGroup('generate vite template');\r\n  try {\r\n    await exec('pnpm run dev init template-vite-vue2 --description 这是一个vite构建的vue2项目 --type vue2 --template lite --buildToolType vite');\r\n    await exec('pnpm run dev init template-vite-vue3 --description 这是一个vite构建的vue3项目 --type vue3 --template lite --buildToolType vite');\r\n    await exec('pnpm run dev init template-vite-react --description 这是一个vite构建的react项目 --type react --template lite --buildToolType vite');\r\n    core.info('vite模版生成成功');\r\n\r\n    const viteConfigFilePath = await glob.create('template-vite-*/vite.config.*')\r\n    const viteConfigFiles = await viteConfigFilePath.glob()\r\n    core.info(`files ${viteConfigFiles}`);\r\n    viteConfigFiles.map(async (viteConfigFile) => {\r\n      const templateName = viteConfigFile.match(/template-vite-(.*)\\//);\r\n      core.info(JSON.stringify(templateName));\r\n\r\n      if (templateName === null) {\r\n        core.setFailed('templateName is null');\r\n        return;\r\n      }\r\n\r\n      const readViteConfigFile = fs.readFileSync(viteConfigFile, 'utf-8');\r\n      const newViteConfig = readViteConfigFile.replace('defineConfig({', `defineConfig({\\n base: ${templateName[0]},`)\r\n      fs.writeFileSync(viteConfigFile, newViteConfig);\r\n      // 临时进入文件夹\r\n      process.chdir(templateName[0]);\r\n      exec(`pnpm install && pnpm run build`);\r\n      fs.renameSync(`${templateName[0]}dist`, `${rootDir}/dist/${templateName[0]}`);\r\n      //怎么查看某一个目录下的所有文件结构\r\n    })\r\n    const files = fs.readdirSync(rootDir);\r\n    core.info(`files ${files}`);\r\n\r\n  } catch (error) {\r\n    if (error instanceof Error) core.setFailed(error.message)\r\n  }\r\n  core.endGroup();\r\n};"],"names":[],"mappings":";AA6GA"}