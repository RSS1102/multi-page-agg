{"version":3,"sources":["/src/index.ts"],"sourcesContent":["import { setFailed as coreSetFailed } from '@actions/core'\r\nimport { exec } from '@actions/exec'\r\nimport { create as globCreate } from '@actions/glob'\r\nimport fs from 'fs';\r\nimport ghPages from 'gh-pages';\r\n\r\n/**\r\n * The main function for the action.\r\n * @returns {Promise<void>} Resolves when the action is complete.\r\n */\r\nexport async function run(): Promise<void> {\r\n  try {\r\n    const currentDir = process.cwd();\r\n    fs.mkdirSync(`${currentDir}/dist`);\r\n\r\n    await exec('git clone https://github.com/Tencent/tdesign-starter-cli.git');\r\n    await exec('cd tdesign-starter-cli');\r\n    await exec('npm install pnpm i -g');\r\n    await exec('pnpm install');\r\n    await exec('pnpm run build');\r\n\r\n    // 生成vite 模版\r\n    await exec('pnpm run dev init template-vite-vue2 --description 这是一个vite构建的vue2项目 --type vue2 --template lite --buildToolType vite');\r\n    await exec('pnpm run dev init template-vite-vue3 --description 这是一个vite构建的vue3项目 --type vue3 --template lite --buildToolType vite');\r\n    await exec('pnpm run dev init template-vite-react --description 这是一个vite构建的react项目 --type react --template lite --buildToolType vite');\r\n\r\n    const viteFilePath = await globCreate('template-vite-*/vite.config.*')\r\n    console.log('vite', viteFilePath)\r\n    const files = await viteFilePath.glob()\r\n    console.log('files', files)\r\n\r\n    files.map(async (file) => {\r\n      console.log('file', file)\r\n      // 匹配`template-vite-*一直到`/`之间的内容\r\n      const templateName = file.match(/template-vite-(.*)\\//)\r\n      console.log('templateName', templateName)\r\n      const readViteConfig = fs.readFileSync(file, 'utf-8');\r\n      if (!templateName) {\r\n        return coreSetFailed('模版名称匹配失败');;\r\n      }\r\n      const newViteConfig = readViteConfig.replace('defineConfig({', `defineConfig({\\n base: ${templateName[0]},`)\r\n      fs.writeFileSync(file, newViteConfig);\r\n      exec(`cd ${templateName[0]} && pnpm install && pnpm run build`);\r\n      // 重命名文件夹使用nodejs\r\n      fs.renameSync(`${file}/dist`, `${currentDir}/dist/${templateName[0]}`);\r\n    })\r\n\r\n    // 将文件夹部署到github page\r\n    await new Promise<void>((resolve, reject) => {\r\n      ghPages.publish(currentDir + '/dist', {\r\n        branch: 'gh-pages', // 更改为你的目标分支\r\n        message: '自动部署更新',\r\n        silent: false,\r\n      }, (err: { message: string | Error }) => {\r\n        if (err) {\r\n          console.error('部署失败', err);\r\n          coreSetFailed(err.message);\r\n          return reject(err);\r\n        }\r\n        console.log('部署成功');\r\n        resolve();\r\n      });\r\n    });\r\n\r\n  } catch (error) {\r\n    // Fail the workflow run if an error occurs\r\n    if (error instanceof Error) coreSetFailed(error.message)\r\n  }\r\n}\r\n\r\nrun();\r\n"],"names":[],"mappings":";AAsEA"}