{"version":3,"sources":["/src/utils.ts"],"sourcesContent":["import * as core from '@actions/core';\r\nimport { exec } from '@actions/exec';\r\nimport * as glob from '@actions/glob';\r\nimport fs from 'fs';\r\nimport { DefaultArtifactClient } from '@actions/artifact'\r\nimport { execSync } from 'child_process';\r\n/**\r\n * 克隆仓库\r\n */\r\nexport const cloneRepo = async (): Promise<void> => {\r\n  core.startGroup('clone repo');\r\n  try {\r\n    // todo: 传入分支\r\n    // todo: 传入仓库地址\r\n    // todo: 传入工作目录\r\n    // todo: 传入 options 参数\r\n    const exitcode = await exec('git', ['init']);\r\n    await exec('git', ['remote', 'add', 'origin', 'https://github.com/Tencent/tdesign-starter-cli']);\r\n    await exec('git', ['fetch', '--depth=1', 'origin', 'develop']);\r\n    await exec('git', ['checkout', 'develop']);\r\n\r\n    if (exitcode !== 0) {\r\n      core.setFailed('clone repo failed');\r\n    }\r\n    core.info(`clone repo success`);\r\n  } catch (error) {\r\n    if (error instanceof Error) core.setFailed(error.message)\r\n  }\r\n  core.endGroup();\r\n};\r\n\r\n/**\r\n * 安装pnpm\r\n */\r\nexport const pnpmInstall = async (): Promise<void> => {\r\n  core.startGroup('install pnpm');\r\n  try {\r\n    const exitcode = await exec('npm install pnpm -g');\r\n\r\n    if (exitcode !== 0) {\r\n      core.setFailed('pnpm install failed');\r\n    }\r\n    core.info(`install pnpm success`);\r\n  } catch (error) {\r\n    if (error instanceof Error) core.setFailed(error.message)\r\n  }\r\n  core.endGroup();\r\n};\r\n\r\n/**\r\n * 构建项目\r\n */\r\nexport const buildProducts = async (): Promise<void> => {\r\n  core.startGroup('build dist');\r\n  try {\r\n    const pnpmInstallExitcode = await exec('pnpm install');\r\n    const exitcode = await exec('pnpm run build');\r\n\r\n    if (exitcode !== 0 || pnpmInstallExitcode !== 0) {\r\n      core.setFailed('build failed');\r\n    }\r\n    core.info(`build success`);\r\n  } catch (error) {\r\n    if (error instanceof Error) core.setFailed(error.message)\r\n  }\r\n  core.endGroup();\r\n};\r\n\r\n/**\r\n * 生成vite模版\r\n * todo(重构)：将代码抽离出来只处理某一个模板的事情\r\n */\r\nexport const generateViteTemplate = async ({ rootDir, currentDir }: { rootDir: string, currentDir: string }): Promise<void> => {\r\n  //todo 兼容vite farm webpack\r\n  // todo规定执行目录\r\n  // todo 传入`${process.cwd()}/dist/${templateName[0]}`参数\r\n  core.startGroup('generate vite template');\r\n  try {\r\n    // await exec('pnpm run dev init template-vite-vue2 --description 这是一个vite构建的vue2项目 --type vue2 --template lite --buildToolType vite');\r\n    await exec('pnpm run dev init template-vite-vue3 --description 这是一个vite构建的vue3项目 --type vue3 --template lite --buildToolType vite');\r\n    // await exec('pnpm run dev init template-vite-react --description 这是一个vite构建的react项目 --type react --template lite --buildToolType vite');\r\n\r\n    const viteConfigFilePath = await glob.create('template-vite-*/vite.config.*')\r\n    const viteConfigFiles = await viteConfigFilePath.glob()\r\n\r\n    viteConfigFiles.map(async (viteConfigFile) => {\r\n      // todo 这里有更好的匹配方法吗\r\n      const templateName = viteConfigFile.match(/template-vite-(.*)\\//);\r\n\r\n      if (templateName === null) {\r\n        core.setFailed('templateName is null');\r\n        return;\r\n      }\r\n      core.info(`templateName: ${templateName[0]}`);\r\n\r\n      const readViteConfigFile = fs.readFileSync(viteConfigFile, 'utf-8');\r\n      const newViteConfig = readViteConfigFile.replace('defineConfig({', `defineConfig({\\n base: '/tdesign-starter-cli/${templateName[0]}',`)\r\n\r\n      core.info(`newViteConfig: ${newViteConfig}`);\r\n\r\n      fs.writeFileSync(viteConfigFile, newViteConfig);\r\n\r\n      const templateDir = `${currentDir}/${templateName[0]}`;\r\n      core.info(`当前目录2: ${currentDir}`);\r\n\r\n    // 合并 pnpm 命令的执行\r\n    await exec(`pnpm install && pnpm run build`, [], { cwd: templateDir });\r\n\r\n    // 构建目标目录路径\r\n    const targetDir = `${rootDir}/dist/${templateName[0]}`;\r\n\r\n    // 创建目标目录，如果不存在\r\n    await fs.promises.mkdir(targetDir, { recursive: true });\r\n    core.info(`mkdir ${templateName[0]} to ${targetDir}`);\r\n\r\n    // 复制构建的文件到目标目录\r\n    await fs.promises.cp(`${templateDir}dist/`, targetDir, { recursive: true });\r\n\r\n      core.info(`copy ${templateName[0]} success`);\r\n    })\r\n\r\n  } catch (error) {\r\n    if (error instanceof Error) core.setFailed(error.message)\r\n  }\r\n  core.endGroup();\r\n};\r\n\r\n/**\r\n * 上传产物 artifact\r\n */\r\nexport const uploadArtifact = async (artifactFilePath: string): Promise<{ id: number; size: number }> => {\r\n  core.startGroup('upload artifact');\r\n  try {\r\n    const artifact = new DefaultArtifactClient();\r\n    // todo 这里匹配的文件有问题    \r\n    core.info(`artifactFilePath: ${artifactFilePath}`);\r\n    const createFilePath = await glob.create(`${artifactFilePath}/dist/**`, { followSymbolicLinks: false });\r\n    core.info(`createFilePath: ${createFilePath}`);\r\n    const filesGlob = await createFilePath.glob();\r\n    core.info(`filesGlob: ${filesGlob}`);\r\n    const { id, size } = await artifact.uploadArtifact(\r\n      'github-pages',\r\n      filesGlob,\r\n      artifactFilePath,\r\n    );\r\n    if (!id || !size) {\r\n      throw new Error('Artifact size is undefined');\r\n    }\r\n    core.info(`upload artifact success, id: ${id}, size: ${size}`);\r\n    return { id, size };\r\n  } catch (error) {\r\n    if (error instanceof Error) core.setFailed(error.message);\r\n    throw error; // 确保在错误情况下抛出异常\r\n  }\r\n};"],"names":[],"mappings":";AA0JA"}